#tag Module
Protected Module Login
	#tag Method, Flags = &h1
		Protected Function Go() As Boolean
		  Dim vLoginInfo() as Variant
		  Dim sUsername, sPassword, bAutoLogin as String
		  dim bSaveUsername, bSavePassword, bAutoLogin as Boolean
		  Dim iPKID as Int64
		  Dim bLoginInfo, bOpenLoginWindow as Boolean
		  
		  
		  // Check if any user data is stored in file
		  vLoginInfo = UserInfo.GetLoginInfo
		  If vLoginInfo.Ubound <> 3 Then
		    'no login info obtained
		    OpenLoginWindow = True
		  Else
		    'login info obtained
		    sUsername = LoginInfo(0)
		    sPassword = LoginInfo(1)
		    bAutoLogin = LoginInfo(2)
		    sPKID = LoginInfo(3)
		    If bAutoLogin = False Then
		      bOpenLoginWindow = True
		    End If
		  End If
		  
		  // Check if there is a username and password
		  If sUsername = "" Or sPassword = "" Then
		    'Username or password not specified
		    bOpenLoginWindow = True
		  End If
		  
		  Dim bAbort as Boolean
		  While Not bAbort
		    
		    If bOpenLoginWindow Then
		      modUIComunication.bLoginAttemptComplete = False
		      modUIComunication.bLaunchLoginWindow = True
		      While Not modUIComunication.bLoginAttemptComplete
		        
		      Wend
		      
		      If modUIComunication.LoginInfoPush() <> Nil
		        sUsername = modUIComunication.LoginInfoPush(0)
		        sPassword = modUIComunication.LoginInfoPush(1)
		        bSaveUsername = modUIComunication.LoginInfoPush(2)
		        bSavePassword = modUIComunication.LoginInfoPush(3)
		        bAutoLogin = modUIComunication.LoginInfoPush(4)
		      Else
		        ' aborted login attempt
		        bAbort = True
		        Return False
		      End If
		      
		    End If
		    
		    If sUsername = "" Or sPassword = "" Then
		      ' no username or password specified
		      bOpenLoginWindow = True
		      bAuthenticationFailed = True
		      Continue
		    Else
		      'username and password have been specified
		      
		      // Try to login
		      Dim rd1 as New ResourceDirectories
		      Dim db1 as PostgreSQLDatabase 
		      db1 = New PostgreSQLDatabase
		      db1.UserName = oUsername
		      db1.Password = oPassword
		      db1.Host = RegDBHost
		      db1.Port = RegDBPort
		      db1.DatabaseName = RegDBDatabaseName
		      app.RegDB = db1
		      
		      If Not db1.Connect Then
		        Dim oErrorMessage as String = db1.ErrorMessage
		        
		        If Instr( oErrorMessage, "database" ) > 0 and InStr( oErrorMessage, "does not exist" ) > 0 Then
		          ' 1 | FATAL: database "db name" does not exist
		          dim err as new RuntimeException
		          err.Message = "Database " + App.RegDb.DatabaseName + " does not exist"
		          err.ErrorNumber = 010001
		          ErrManage("Login.Go",err.Message)
		          Return False
		          
		        ElseIf InStr( oErrorMessage, "could not connect to server: Network is unreachable" ) > 0 Then
		          ' 1 | could not connect to server: Network is unreachable
		          dim err as new RuntimeException
		          err.Message = "Could not connect to server: Network is Unreachable"
		          err.ErrorNumber = 010003
		          ErrManage("Login.Go",err.Message)
		          Return False
		          
		        ElseIf InStr( oErrorMessage, "password authentication failed" ) > 0 Then
		          ' 1 | FATAL: password authentication failed for user "..."
		          bAuthenticationFailed = True
		          OpenLoginWindow = True
		          Continue
		          
		        Else
		          'Not sure what happened
		          Dim err as New RuntimeException
		          err.Message = "Something strange happened, don't have an error catch for this connection error"
		          ErrManage("Login.Go",Err.Message)
		          Return False
		        End If
		        
		        
		      Else
		        // We have connected
		        'oAbort = True
		        Exit
		      End If
		    End If
		    
		  Wend
		  
		  // Abort login if user authentication has failed
		  If bAuthenticationFailed Or bAbort Then 
		    App.bUserAuthenticationFailed = True
		    Return False
		  End If
		  
		  Dim sSVUsername as string
		  Dim sSVPassword as string
		  Dim bSVAutoLogin as Boolean
		  
		  If bSaveUsername Then sSVUsername = sUsername
		  If bSavePassword Then sSVPassword = sPassword
		  If bAutoLogin Then sSVAutoLogin = bAutoLogin
		  
		  If oSaveUsername Then
		    UserInfo.SaveLoginInfo(saveUsername,savePassword,saveAutoLogin,savePKID)
		  End If
		  
		  // Store Username in a variable
		  UserInfo.Username = oUsername
		  
		  
		  Return True
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h1
		Protected Function Goold() As Boolean
		  Dim LoginInfo() as Variant
		  Dim oUsername as String
		  Dim oPassword as String
		  Dim oSaveUsername as Boolean
		  Dim oSavePassword as Boolean
		  Dim oPKID as Int64
		  Dim oAutoLogin as Boolean
		  Dim OpenLoginWindow as Boolean
		  
		  // Check if any user data is stored in file
		  LoginInfo = UserInfo.GetLoginInfo
		  If LoginInfo.Ubound <> 3 Then
		    'no login info obtained
		    OpenLoginWindow = True
		  Else
		    'login info obtained
		    oUsername = LoginInfo(0)
		    oPassword = LoginInfo(1)
		    oAutoLogin = LoginInfo(2)
		    oPKID = LoginInfo(3)
		    If oAutoLogin = False Then
		      OpenLoginWindow = True
		    End If
		  End If
		  
		  // Check if there is a username and password
		  If oUsername = "" Or oPassword = "" Then
		    'Username or password not specified
		    OpenLoginWindow = True
		  End If
		  
		  
		  Dim oAbort as Boolean
		  Dim bAuthenticationFailed as Boolean
		  'Dim lw1 as New window_login
		  While Not oAbort
		    
		    Dim lw1 as New window_login
		    
		    If OpenLoginWindow Then
		      If bAuthenticationFailed Then lw1.authentication_failed = True
		      bAuthenticationFailed = False
		      lw1.username = oUsername
		      lw1.password = oPassword
		      lw1.SetFields
		      lw1.ShowModal
		      
		      If lw1.aborted Then
		        'user aborted login process
		        app.bUserAuthenticationFailed = True
		        Return False
		      Else
		        'user did not abort login process
		        oUsername = lw1.username
		        oPassword = lw1.password
		        oSaveUsername = lw1.save_username
		        oSavePassword = lw1.save_password
		        oAutoLogin = lw1.auto_login
		      End If
		      
		    End If
		    
		    If oUsername = "" Or oPassword = "" Then
		      ' no username or password specified
		      OpenLoginWindow = True
		      bAuthenticationFailed = True
		      Continue
		    Else
		      'username and password have been specified
		      
		      // Try to login
		      Dim rd1 as New ResourceDirectories
		      Dim db1 as PostgreSQLDatabase 
		      db1 = New PostgreSQLDatabase
		      db1.UserName = oUsername
		      db1.Password = oPassword
		      db1.Host = RegDBHost
		      db1.Port = RegDBPort
		      db1.DatabaseName = RegDBDatabaseName
		      app.RegDB = db1
		      
		      If Not db1.Connect Then
		        Dim oErrorMessage as String = db1.ErrorMessage
		        
		        If Instr( oErrorMessage, "database" ) > 0 and InStr( oErrorMessage, "does not exist" ) > 0 Then
		          ' 1 | FATAL: database "db name" does not exist
		          dim err as new RuntimeException
		          err.Message = "Database " + App.RegDb.DatabaseName + " does not exist"
		          err.ErrorNumber = 010001
		          ErrManage("Login.Go",err.Message)
		          Return False
		          
		        ElseIf InStr( oErrorMessage, "could not connect to server: Network is unreachable" ) > 0 Then
		          ' 1 | could not connect to server: Network is unreachable
		          dim err as new RuntimeException
		          err.Message = "Could not connect to server: Network is Unreachable"
		          err.ErrorNumber = 010003
		          ErrManage("Login.Go",err.Message)
		          Return False
		          
		        ElseIf InStr( oErrorMessage, "password authentication failed" ) > 0 Then
		          ' 1 | FATAL: password authentication failed for user "..."
		          bAuthenticationFailed = True
		          OpenLoginWindow = True
		          Continue
		          
		        Else
		          'Not sure what happened
		          Dim err as New RuntimeException
		          err.Message = "Something strange happened, don't have an error catch for this connection error"
		          ErrManage("Login.Go",Err.Message)
		          Return False
		        End If
		        
		        
		      Else
		        // We have connected
		        'oAbort = True
		        Exit
		      End If
		      
		    End If
		    
		    
		    
		  Wend
		  
		  // Abort login if user authentication has failed
		  If bAuthenticationFailed Or oAbort Then 
		    App.bUserAuthenticationFailed = True
		    Return False
		  End If
		  
		  // Close the login window
		  'lw1.close  ## already closed by ok cancel buttons
		  
		  // Check if we need to save any information
		  Dim ProcedeWithSaving as Boolean
		  Dim saveUsername as String
		  Dim savePassword as String
		  Dim saveAutoLogin as Boolean
		  Dim savePKID as Int64 = oPKID
		  
		  'should we save username
		  If oSaveUsername Then
		    ProcedeWithSaving = True
		    saveUsername = oUsername
		  Else
		    saveUsername = ""
		  End If
		  
		  'should we save password
		  If oSaveUsername And oSavePassword then
		    ProcedeWithSaving = True
		    savePassword = oPassword
		  Else
		    savePassword = ""
		  End If
		  
		  saveAutoLogin = oAutoLogin
		  
		  If oSaveUsername Then
		    UserInfo.SaveLoginInfo(saveUsername,savePassword,saveAutoLogin,savePKID)
		  End If
		  
		  // Store Username in a variable
		  UserInfo.Username = oUsername
		  
		  
		  Return True
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h1
		Protected Sub LoginWindowHandler()
		  dim lw as New window_login
		  dim sUsername, sPassword as String
		  dim bAuthenticationFailed as Boolean
		  dim sRetUsername, sRetPassword as string
		  dim bSaveUsername, bSavePassword, bAutoLogin as Boolean
		  
		  If modUIComunication.LoginInfoPull.Ubound > -1 Then 
		    sUsername = modUIComunication.LoginInfoPull(0)
		  End If
		  If modUIComunication.LoginInfoPull.Ubound > 0 Then
		    sPassword = modUIComunication.LoginInfoPull(1)
		  End If
		  If modUIComunication.LoginInfoPull.Ubound > 1 THen
		    bAuthenticationFailed = modUIComunication.LoginInfoPull(2)
		  End If
		  
		  lw.username = sUsername
		  lw.password = sPassword
		  lw.authentication_failed = bAuthenticationFailed
		  lw.SetFields
		  lw.ShowModal
		  
		  If lw.aborted Then
		    Return Nil
		  Else
		    sRetUsername = lw.username
		    sRetPassword = lw.password
		    bSaveUsername = lw.save_username
		    bSavePassword = lw.save_password
		    bAutoLogin = lw.auto_login
		  End If
		  
		  modUIComunication.LoginInfoPush() = Array( sRetUsername, sRetPassword, bSaveUsername, bSavePassword, bAutoLogin )
		End Sub
	#tag EndMethod


	#tag Property, Flags = &h1
		#tag Note
			Online
			or
			Offline
			or
			ReadOnly
		#tag EndNote
		Protected State As String
	#tag EndProperty


	#tag Constant, Name = RegDBDatabaseName, Type = String, Dynamic = False, Default = \"otis_data", Scope = Private
	#tag EndConstant

	#tag Constant, Name = RegDBHost, Type = String, Dynamic = False, Default = \"45.63.78.70", Scope = Private
	#tag EndConstant

	#tag Constant, Name = RegDBPort, Type = Double, Dynamic = False, Default = \"5432", Scope = Private
	#tag EndConstant


	#tag ViewBehavior
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
	#tag EndViewBehavior
End Module
#tag EndModule
